/**通用基础依赖配置表*/

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.name)
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}

kotlin {
    experimental {
        // 开启kotlin协程
        coroutines 'enable'
    }
}

android {
    compileSdkVersion build_versions.SDK_COMPILE

    androidExtensions {
        experimental = true
    }

    defaultConfig {
        minSdkVersion build_versions.SDK_MIN
        targetSdkVersion build_versions.SDK_TARGET
        versionCode 2
        versionName "1.0.1"
        // 增加对vector图片的支持
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi", 'armeabi-v7a'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // apk 方法数超过 65536 限制，进行分包处理
        multiDexEnabled true
        dexOptions {
            javaMaxHeapSize "3g"
        }
    }

    sourceSets {
        // 数据库概要、记录存放位置
        androidTest.assets.srcDirs += files("$projectDir/schemas")

        main {
            jniLibs.srcDir(['libs'])
        }
    }

    buildTypes {
        release {
            // 开启混淆
            minifyEnabled false
            // 压缩优化
            zipAlignEnabled true
            // 默认的混淆文件以及我们指定的混淆文件，子模块使用 consumerProguardFiles
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            // 开启混淆
            minifyEnabled false
            // 压缩优化
            zipAlignEnabled true
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin
    api deps.kotlin.stdlib
    testImplementation deps.kotlin.test
    // Room数据库
    api deps.room.runtime
    api deps.room.rxjava2
    kapt deps.room.compiler
    // 阿里路由
    api deps.arouter
    kapt deps.arouter_compiler
    // LifeCycle
    api deps.lifecycle.runtime
    api deps.lifecycle.extensions
    api deps.lifecycle.java8
    api deps.lifecycle.viewmodel
    api deps.lifecycle.viewmodel_ktx
    api deps.lifecycle.livedata
    api deps.lifecycle.reactivestreams
    annotationProcessor deps.lifecycle.compiler
    kapt deps.lifecycle.compiler

    // multidex
    api deps.multidex
    // gson
    api deps.gson
    // glide
    kapt deps.glide.compiler
}

repositories {
    mavenCentral()
}

// 获取编译时间
static def apkTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

ext.time = apkTime()